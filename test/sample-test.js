const { expect } = require("chai");
const { ethers } = require("hardhat");
const { deployMintLand } = require("../scripts/deploy")



describe("Mint", function () {
  it("the _landOwner should be the owner of the token 1", async function () {
    [owner, account1, account2, account3] = await ethers.getSigners()
    const contract =  await deployMintLand()
    const landValue  = ethers.utils.parseEther("500")
    const mint = await contract.connect(account2).mintLand(account2.address,"uri",landValue)
    console.log(account2.address);
    const userBalance = await contract.userBalance(account2.address)
    expect(userBalance).to.equal(1)
  });
  it("Should revert if someone else try to mint the land", async function () {
    [owner, account1, account2, account3] = await ethers.getSigners()
    const contract =  await deployMintLand()
    const landValue  = ethers.utils.parseEther("500")
    await expect( contract.connect(account1).mintLand(account2.address,"uri",landValue)).to.be.revertedWith("only minter")
  });

});


// describe("Create investment pool", function () {
//   it("should revert if the budget of invest greater than the land value", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract =  await deployMintLand()
//     const landValue  = ethers.utils.parseEther("500")
//     const budget = ethers.utils.parseEther("501")
//     const mint = await contract.connect(account1).mintLand(account2.address,"uri",landValue)
//     const approve = await contract.connect(account2).approve(contract.address,1)
//     await expect(contract.connect(account2).createInvestmentPool(1,budget,1,30)).to.be.revertedWith("over price")
//   })
//   it("should revert if the caller is not the owner of the land", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract =  await deployMintLand()
//     const landValue  = ethers.utils.parseEther("500")
//     const budget = ethers.utils.parseEther("501")
//     const mint = await contract.connect(account1).mintLand(account2.address,"uri",landValue)
//     const approve = await contract.connect(account2).approve(contract.address,1)
//     await expect(contract.connect(account1).createInvestmentPool(1,budget,1,30)).to.be.revertedWith("not Owner")
//   })
//   it("if all passed good the smart contract should be the owner of the land", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract =  await deployMintLand()
//     const landValue  = ethers.utils.parseEther("500")
//     const mint = await contract.connect(account1).mintLand(account2.address,"uri",landValue)
//     const approve = await contract.connect(account2).approve(contract.address,1)
//     const create = await contract.connect(account2).createInvestmentPool(1,landValue,1,30)
//     const landOWner = await contract.ownerOf(1)
//     expect(landOWner).to.equal(contract.address)
//   })
//   it("if all passed good the caller should be the owner of investment 1", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract =  await deployMintLand()
//     const landValue  = ethers.utils.parseEther("500")
//     const mint = await contract.connect(account1).mintLand(account2.address,"uri",landValue)
//     const approve = await contract.connect(account2).approve(contract.address,1)
//     const create = await contract.connect(account2).createInvestmentPool(1,landValue,1,30)
//     const investmentDetail = await contract.getInvstementPoolDetail(0)
//     expect(investmentDetail.owner).to.equal(account2.address)
//   })

// })

// describe("Invest", function () {
//   it("Should revert if the budget is full", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("17")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     //const invest2 = await contract.connect(account3).invest(1,{value:landValue})
//     await expect(contract.connect(account3).invest(0,{value:budget})).to.be.revertedWith("full")
//   })
//   it("Should revert if the last delay is finished", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("17")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     await network.provider.send("evm_increaseTime", [87000])

//     await expect(contract.connect(account3).invest(0,{value:landValue})).to.be.revertedWith("end")
//   })
//   it("Should revert if the amount < mini entry", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("3")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     await expect(contract.connect(account3).invest(0,{value:budget})).to.be.revertedWith("wrong value")
//   })
//   it("Should add amount to investment pool", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("3")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     const invPool = await contract.getInvestmentPoolBalance(0)
//      expect(invPool).to.equal(landValue)
//   })
// })


// describe("Withdraw pool", function () {
//   it("Should revert if the caller is not he owner of the investment pool", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("17")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})

//     await expect(contract.connect(account3).withdrawPool(0)).to.be.revertedWith("not owner")
//   })
//   it("Should revert if the caller is not he owner of the investment pool", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("17")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const balancebefore = await contract.getContractBalance()
//     const invest = await contract.connect(account2).invest(0,{value:landValue})
//     const withraw = await contract.connect(account2).withdrawPool(0)
//     const balanceAfter = await contract.getContractBalance()
//      expect(balancebefore).to.equal(balanceAfter)
//   })

// })

// describe("Pay the loan", function () {
//   it("Should revert if the caller is not he owner of the investment pool", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("17")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     const withraw = await contract.connect(account2).withdrawPool(0)
//     await expect(contract.connect(account3).payTheLoan(0)).to.be.revertedWith("not owner")
//   })
//   it("Should revert if the status is not withdrew", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("17")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     await expect(contract.connect(account2).payTheLoan(0)).to.be.revertedWith("Nop")
//   })
//   it("Should revert if 365 is finished", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const load = ethers.utils.parseEther("111")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     const withraw = await contract.connect(account2).withdrawPool(0)
//     await network.provider.send("evm_increaseTime", [32000000])
//     await expect(contract.connect(account2).payTheLoan(0,{value:load})).to.be.revertedWith("late")
//   })
//   it("Should revert if thr amount < loan+11%", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("17")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     const withraw = await contract.connect(account2).withdrawPool(0)
//     await expect(contract.connect(account2).payTheLoan(0,{value:budget})).to.be.revertedWith("not enough")
//   })
//   it("Should give the owner of the land owner his land", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("120")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     const withraw = await contract.connect(account2).withdrawPool(0)
//     const pay = await contract.connect(account2).payTheLoan(0,{value:budget})
//     const balanc = await contract.ownerOf(1)
//     expect(balanc).to.equal(account2.address)
//   })
// })

// describe("Sell land", function () {
//   it("Should revert if caller is not aminter", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("17")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     const withraw = await contract.connect(account2).withdrawPool(0)
//     await expect(contract.connect(account2).sellLand(0)).to.be.revertedWith("only minter")
//   })
//   it("Should revert if it's < 365 days", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("17")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     const withraw = await contract.connect(account2).withdrawPool(0)
//    // await network.provider.send("evm_increaseTime", [87000])
//     await expect(contract.connect(account1).sellLand(0)).to.be.revertedWith("not yet")
//   })
//   it("Should revert if the status is paied", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("100")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0, { value: landValue })
//     const withraw = await contract.connect(account2).withdrawPool(0)
//     const pay = await contract.connect(account2).payTheLoan(0, { value: budget })

//     await network.provider.send("evm_increaseTime", [32000000])
//     await expect(contract.connect(account1).sellLand(0)).to.be.revertedWith("Paied")
//   })
//   it("Should ban the investment", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("100")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0, { value: landValue })
//     const withraw = await contract.connect(account2).withdrawPool(0)
//     await network.provider.send("evm_increaseTime", [32000000])
//     const sell = await contract.connect(account1).sellLand(0)
//     const invDetail = await contract.getInvstementPoolDetail(0)
//     expect(invDetail.status).to.equal(3)
//   })
// })

// describe("Buy a banned land", function () {
//   it("Should revert if caller is not aminter", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("17")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     const withraw = await contract.connect(account2).withdrawPool(0)
//     //const sell = await contract.connect(account1).sellLand(0)
//     await expect(contract.connect(account2).buyABannedLand(0)).to.be.revertedWith("Wrong")
//   })
//   it("Should revert if caller is not aminter", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("17")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     const withraw = await contract.connect(account2).withdrawPool(0)
//     await network.provider.send("evm_increaseTime", [32000000])
//     const sell = await contract.connect(account1).sellLand(0)
//     await expect(contract.connect(account2).buyABannedLand(0,{value:budget})).to.be.revertedWith("not enough")
//   })
// })


// describe("claim", function () {
//   it("Should revert if it's not paied", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("100")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     const withraw = await contract.connect(account2).withdrawPool(0)
//     //const pay = await contract.connect(account2).payTheLoan(0,{value:budget})
//     //const sell = await contract.connect(account1).sellLand(0)
//    // await network.provider.send("evm_increaseTime", [32000000])
//     await expect(contract.connect(account3).claim(0)).to.be.revertedWith("not paied")
//   })
//   it("Should revert if caller is not aminter", async function () {
//     [owner, account1, account2, account3] = await ethers.getSigners()
//     const contract = await deployMintLand()
//     const landValue = ethers.utils.parseEther("100")
//     const budget = ethers.utils.parseEther("120")
//     const mint = await contract.connect(account1).mintLand(account2.address, "uri", landValue)
//     const approve = await contract.connect(account2).approve(contract.address, 1)
//     const create = await contract.connect(account2).createInvestmentPool(1, landValue, 1, 30)
//     // console.log(await ethers.getBalance());
//     const invest = await contract.connect(account3).invest(0,{value:landValue})
//     // console.log(await ethers.getBalance());
//     const withraw = await contract.connect(account2).withdrawPool(0)
//     const pay = await contract.connect(account2).payTheLoan(0,{value:budget})
//     console.log(await contract.getContractBalance())
//     const claim = await contract.connect(account3).claim(0)
//    // await network.provider.send("evm_increaseTime", [32000000])
//     expect(1).to.equal(1)
//   })

// })